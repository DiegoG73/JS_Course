let a = 10;
let b = a;

a = 30

console.log({ a, b })


//! TODOS LOS PRIMITIVOS SE PASAN POR VALOR 游녡


//? TODOS LOS OBJETOS SE PASAN POR REFERENCIA 游녢





//*  Pasando valores por referencia:
let gwen = { name: 'Gwen' };

//! Aqu칤 vemos游녢 el operador "SPREAD", que rompe las referencias con JavaScript y separa los elementos (distinto al operador rest, que ese S칍LAMENTE se puede usar en las funciones)
let ana = { ...gwen };

ana.name = 'Ana'

console.log(gwen, ana) //* 游녤 Con el c칩digo anterior, le asignar치 el mismo nombre a Gwen que a Ana, porque se pasan por referencia en todos los objetos de JavaScript








//! Aqu칤 podemos ver que游녢 el operador "SPREAD" opera dentro de una funci칩n, 칠sto es debido que al colocar los "{}", convertimos el argumento en un OBJETO
const changeName = ({ ...person }) => {
    person.name = 'Tony';
    return person;
}
let peter = { name: 'Peter' };
let tony = changeName(peter);

// console.log({ peter, tony }) //* El valor que imprime ser치: Peter = Tony y Tony = Tony



//* Arrays
const fruits = ['Apple', 'Pear', 'Pineapple'];
// const anotherFruits = [...fruits];//! Aqu칤 lo que hacemos es romper la relaci칩n entre el array fruits y anotherFruits, por lo que, el nuevo push, no afectar치 al antig칲o
console.time('Slice');
const anotherFruits = fruits.slice(); //* Slice: M칠todo que viene de los arrays que cortan el arreglo y regresa los elementos que especificamos
console.timeEnd('Slice');

console.time('Spread');
const anotherFruits2 = [...fruits];
console.timeEnd('Spread');

anotherFruits.push('Mango');
console.table({ fruits, anotherFruits });


//* El operador Spread suele ser m치s r치pido que Slice, por lo que, de nosotros es responsabilidad evaluar la situaci칩n para cada uno


